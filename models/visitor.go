// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Visitor Model for thevisitor info
//
// swagger:model Visitor
type Visitor struct {

	// id
	ID ObjectID `json:"_id,omitempty"`

	// app info
	AppInfo *AppInfo `json:"app_info,omitempty"`

	// device info
	DeviceInfo *DeviceInfo `json:"device_info,omitempty"`

	// sdk info
	SdkInfo *SDKInfo `json:"sdk_info,omitempty"`

	// session info
	SessionInfo *SessionInfo `json:"session_info,omitempty"`
}

// Validate validates this visitor
func (m *Visitor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSdkInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Visitor) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("_id")
		}
		return err
	}

	return nil
}

func (m *Visitor) validateAppInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AppInfo) { // not required
		return nil
	}

	if m.AppInfo != nil {
		if err := m.AppInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app_info")
			}
			return err
		}
	}

	return nil
}

func (m *Visitor) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_info")
			}
			return err
		}
	}

	return nil
}

func (m *Visitor) validateSdkInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SdkInfo) { // not required
		return nil
	}

	if m.SdkInfo != nil {
		if err := m.SdkInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sdk_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sdk_info")
			}
			return err
		}
	}

	return nil
}

func (m *Visitor) validateSessionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SessionInfo) { // not required
		return nil
	}

	if m.SessionInfo != nil {
		if err := m.SessionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("session_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("session_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this visitor based on the context it is used
func (m *Visitor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSdkInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSessionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Visitor) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("_id")
		}
		return err
	}

	return nil
}

func (m *Visitor) contextValidateAppInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AppInfo != nil {
		if err := m.AppInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app_info")
			}
			return err
		}
	}

	return nil
}

func (m *Visitor) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_info")
			}
			return err
		}
	}

	return nil
}

func (m *Visitor) contextValidateSdkInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SdkInfo != nil {
		if err := m.SdkInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sdk_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sdk_info")
			}
			return err
		}
	}

	return nil
}

func (m *Visitor) contextValidateSessionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SessionInfo != nil {
		if err := m.SessionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("session_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("session_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Visitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Visitor) UnmarshalBinary(b []byte) error {
	var res Visitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AppInfo app info
//
// swagger:model AppInfo
type AppInfo struct {

	// app ID
	AppID string `json:"app_id,omitempty"`

	// app mode
	AppMode string `json:"app_mode,omitempty"`

	// app name
	AppName string `json:"app_name,omitempty"`

	// app version
	AppVersion string `json:"app_version,omitempty"`

	// bundle ID
	BundleID string `json:"bundle_id,omitempty"`
}

// Validate validates this app info
func (m *AppInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this app info based on context it is used
func (m *AppInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AppInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInfo) UnmarshalBinary(b []byte) error {
	var res AppInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceInfo device info
//
// swagger:model DeviceInfo
type DeviceInfo struct {

	// d p i
	DPI uint64 `json:"dpi,omitempty"`

	// hardware model
	HardwareModel string `json:"hardware_model,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// o s version
	OSVersion string `json:"os_version,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// dimensions
	Dimensions *Dimensions `json:"dimensions,omitempty"`

	// dimensions in pixels
	DimensionsInPixels *DimensionsInPixels `json:"dimensions_in_pixels,omitempty"`
}

// Validate validates this device info
func (m *DeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensionsInPixels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceInfo) validateDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	if m.Dimensions != nil {
		if err := m.Dimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_info" + "." + "dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_info" + "." + "dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceInfo) validateDimensionsInPixels(formats strfmt.Registry) error {
	if swag.IsZero(m.DimensionsInPixels) { // not required
		return nil
	}

	if m.DimensionsInPixels != nil {
		if err := m.DimensionsInPixels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_info" + "." + "dimensions_in_pixels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_info" + "." + "dimensions_in_pixels")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device info based on the context it is used
func (m *DeviceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDimensionsInPixels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceInfo) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Dimensions != nil {
		if err := m.Dimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_info" + "." + "dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_info" + "." + "dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceInfo) contextValidateDimensionsInPixels(ctx context.Context, formats strfmt.Registry) error {

	if m.DimensionsInPixels != nil {
		if err := m.DimensionsInPixels.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_info" + "." + "dimensions_in_pixels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_info" + "." + "dimensions_in_pixels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceInfo) UnmarshalBinary(b []byte) error {
	var res DeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Dimensions dimensions
//
// swagger:model Dimensions
type Dimensions struct {

	// height
	Height uint64 `json:"height,omitempty"`

	// width
	Width uint64 `json:"width,omitempty"`
}

// Validate validates this dimensions
func (m *Dimensions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this dimensions based on context it is used
func (m *Dimensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Dimensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dimensions) UnmarshalBinary(b []byte) error {
	var res Dimensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DimensionsInPixels dimensions in pixels
//
// swagger:model DimensionsInPixels
type DimensionsInPixels struct {

	// height
	Height uint64 `json:"height,omitempty"`

	// width
	Width uint64 `json:"width,omitempty"`
}

// Validate validates this dimensions in pixels
func (m *DimensionsInPixels) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this dimensions in pixels based on context it is used
func (m *DimensionsInPixels) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DimensionsInPixels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DimensionsInPixels) UnmarshalBinary(b []byte) error {
	var res DimensionsInPixels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SDKInfo s d k info
//
// swagger:model SDKInfo
type SDKInfo struct {

	// config ID
	ConfigID string `json:"config_id,omitempty"`

	// s d k start time
	SDKStartTime int64 `json:"sdk_start_time,omitempty"`

	// s d k version
	SDKVersion uint64 `json:"sdk_version,omitempty"`

	// tick interval
	TickInterval float32 `json:"tick_interval,omitempty"`
}

// Validate validates this s d k info
func (m *SDKInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this s d k info based on context it is used
func (m *SDKInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SDKInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SDKInfo) UnmarshalBinary(b []byte) error {
	var res SDKInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SessionInfo session info
//
// swagger:model SessionInfo
type SessionInfo struct {

	// duration
	Duration float64 `json:"duration,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// is background
	IsBackground bool `json:"is_first_session,omitempty"`

	// is first session
	IsFirstSession bool `json:"_id,omitempty"`

	// launch time
	LaunchTime int64 `json:"launch_time,omitempty"`

	// launch type
	LaunchType string `json:"launch_type,omitempty"`

	// process name
	ProcessName string `json:"process_name,omitempty"`

	// startup time
	StartupTime uint64 `json:"startup_time,omitempty"`

	// total duration
	TotalDuration float64 `json:"total_duration,omitempty"`
}

// Validate validates this session info
func (m *SessionInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this session info based on context it is used
func (m *SessionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SessionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionInfo) UnmarshalBinary(b []byte) error {
	var res SessionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
